#include <gtest/gtest.h>

#include "packet_reader.hpp"
#include "http_parser.hpp"

class HttpAnalyzerTest : public ::testing::Test {
protected:
    const u_char exampleHttpPacket[562] = { 
        0xe0, 0x19, 0x54, 0x19, 0x2a, 0xe0, 0x90, 0x78,
        0x41, 0xcb, 0x69, 0x6b, 0x08, 0x00, 0x45, 0x00,
        0x02, 0x24, 0x43, 0x88, 0x40, 0x00, 0x80, 0x06,
        0x4a, 0xa8, 0xc0, 0xa8, 0x01, 0x31, 0x58, 0xff,
        0x4f, 0xcb, 0xc0, 0xcf, 0x00, 0x50, 0x89, 0xdb,
        0x6b, 0x7f, 0xe8, 0x23, 0x05, 0xa2, 0x50, 0x18,
        0x02, 0x04, 0xda, 0xeb, 0x00, 0x00, 0x47, 0x45,
        0x54, 0x20, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69,
        0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
        0x68, 0x70, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f,
        0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73,
        0x74, 0x3a, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x65,
        0x76, 0x75, 0x2e, 0x6c, 0x68, 0x68, 0x2e, 0x63,
        0x6f, 0x6d, 0x2e, 0x74, 0x72, 0x0d, 0x0a, 0x43,
        0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
        0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d,
        0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x43,
        0x61, 0x63, 0x68, 0x65, 0x2d, 0x43, 0x6f, 0x6e,
        0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x20, 0x6d, 0x61,
        0x78, 0x2d, 0x61, 0x67, 0x65, 0x3d, 0x30, 0x0d,
        0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
        0x2d, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
        0x65, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
        0x74, 0x73, 0x3a, 0x20, 0x31, 0x0d, 0x0a, 0x55,
        0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e,
        0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c,
        0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28,
        0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20,
        0x4e, 0x54, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x3b,
        0x20, 0x57, 0x69, 0x6e, 0x36, 0x34, 0x3b, 0x20,
        0x78, 0x36, 0x34, 0x29, 0x20, 0x41, 0x70, 0x70,
        0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74,
        0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 0x20,
        0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 0x20,
        0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 0x63,
        0x6b, 0x6f, 0x29, 0x20, 0x43, 0x68, 0x72, 0x6f,
        0x6d, 0x65, 0x2f, 0x31, 0x31, 0x33, 0x2e, 0x30,
        0x2e, 0x30, 0x2e, 0x30, 0x20, 0x53, 0x61, 0x66,
        0x61, 0x72, 0x69, 0x2f, 0x35, 0x33, 0x37, 0x2e,
        0x33, 0x36, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65,
        0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74,
        0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x61, 0x70,
        0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
        0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x2b,
        0x78, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c,
        0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
        0x78, 0x6d, 0x6c, 0x3b, 0x71, 0x3d, 0x30, 0x2e,
        0x39, 0x2c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f,
        0x61, 0x76, 0x69, 0x66, 0x2c, 0x69, 0x6d, 0x61,
        0x67, 0x65, 0x2f, 0x77, 0x65, 0x62, 0x70, 0x2c,
        0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70,
        0x6e, 0x67, 0x2c, 0x2a, 0x2f, 0x2a, 0x3b, 0x71,
        0x3d, 0x30, 0x2e, 0x38, 0x2c, 0x61, 0x70, 0x70,
        0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
        0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2d,
        0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
        0x3b, 0x76, 0x3d, 0x62, 0x33, 0x3b, 0x71, 0x3d,
        0x30, 0x2e, 0x37, 0x0d, 0x0a, 0x41, 0x63, 0x63,
        0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f,
        0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a,
        0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c,
        0x61, 0x74, 0x65, 0x0d, 0x0a, 0x41, 0x63, 0x63,
        0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67,
        0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x74, 0x72,
        0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
        0x3a, 0x20, 0x50, 0x48, 0x50, 0x53, 0x45, 0x53,
        0x53, 0x49, 0x44, 0x3d, 0x34, 0x69, 0x61, 0x34,
        0x34, 0x70, 0x64, 0x64, 0x39, 0x71, 0x30, 0x73,
        0x67, 0x76, 0x71, 0x62, 0x62, 0x6a, 0x32, 0x68,
        0x35, 0x71, 0x65, 0x63, 0x72, 0x33, 0x0d, 0x0a,
        0x0d, 0x0a };
};

TEST(PacketCapturerTest, OpenOffline) {
    PacketCapturer capturer("../../test.pcap", true);
    ASSERT_TRUE(capturer.open());
}

TEST_F(HttpAnalyzerTest, IsHttpRequest) {
    HttpAnalyzer analyzer; 
    
    ASSERT_TRUE(analyzer.isHttpRequest(exampleHttpPacket));
}

TEST_F(HttpAnalyzerTest, GetUserAgent) {
    HttpAnalyzer analyzer;
    
    const std::string_view expectedUserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36";
    ASSERT_EQ( std::string_view(analyzer.getUserAgent(exampleHttpPacket, sizeof(exampleHttpPacket))), expectedUserAgent);
}

TEST_F(HttpAnalyzerTest, AnalyzePacket) {
    HttpAnalyzer analyzer;

    analyzer.analyzePacket(exampleHttpPacket, sizeof(exampleHttpPacket));

    const std::string expectedUserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36";
    ASSERT_EQ(analyzer.getUserAgents().at(expectedUserAgent), 1);
    ASSERT_EQ(analyzer.getBandwidths().at(expectedUserAgent), sizeof(exampleHttpPacket));
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
